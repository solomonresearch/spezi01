#!/usr/bin/env node

/**
 * Reorganize civil law subcategories based on new structure
 */

const { Client } = require('pg');

const connectionString = 'postgresql://postgres.pgprhlzpzegwfwcbsrww:3S_LRQm!gnJf3V$@aws-1-eu-north-1.pooler.supabase.com:6543/postgres';

// Mapping of case patterns to subcategories based on content analysis
const SUBCATEGORY_MAPPING = {
  // Keep existing - already correct
  'Persoana fizicƒÉ (Capacitatea de folosin»õƒÉ. Declararea judecƒÉtoreascƒÉ a mor»õii)': {
    keep: true,
    caseCodes: [] // Already assigned correctly
  },

  // Consolidate these into main category
  'Persoana fizicƒÉ (Capacitatea de exerci»õiu)': {
    keep: true,
    caseCodes: [] // Keep all existing + merge from "Ocrotirea minorului"
  },

  // Move "Ocrotirea minorului" cases to either main or new "Ocrotirea" category
  // Based on HTML, we should keep them separate
  'Persoana fizicƒÉ (Ocrotirea incapabilului)': {
    newName: true,
    oldName: 'Persoana fizicƒÉ (Capacitatea de exerci»õiu - Ocrotirea minorului)',
    caseCodes: [] // All CIV1A[Q-Z]O cases about tutela
  },

  // For NULL cases and other edge cases
  'Altele': {
    newName: true,
    caseCodes: [] // NULL subcategory cases + edge cases
  }
};

async function reorganizeSubcategories() {
  const client = new Client({
    connectionString,
    ssl: { rejectUnauthorized: false }
  });

  try {
    await client.connect();
    console.log('\nüîÑ Reorganizing Civil Law Subcategories...\n');

    // Step 1: Rename "Persoana fizicƒÉ (Capacitatea de exerci»õiu - Ocrotirea minorului)"
    // to "Persoana fizicƒÉ (Ocrotirea incapabilului)"
    console.log('1Ô∏è‚É£ Renaming "Ocrotirea minorului" to "Ocrotirea incapabilului"...');
    const { rowCount: renamed } = await client.query(`
      UPDATE cases
      SET subcategory = 'Persoana fizicƒÉ (Ocrotirea incapabilului)'
      WHERE subcategory = 'Persoana fizicƒÉ (Capacitatea de exerci»õiu - Ocrotirea minorului)'
        AND case_code LIKE 'CIV%';
    `);
    console.log(`   ‚úÖ Updated ${renamed} cases\n`);

    // Step 2: Move NULL subcategory cases to "Altele"
    console.log('2Ô∏è‚É£ Moving NULL subcategory cases to "Altele"...');
    const { rowCount: movedNull } = await client.query(`
      UPDATE cases
      SET subcategory = 'Altele'
      WHERE (subcategory IS NULL OR subcategory = '' OR subcategory = 'NULL')
        AND case_code LIKE 'CIV%';
    `);
    console.log(`   ‚úÖ Updated ${movedNull} cases\n`);

    // Step 3: Show final distribution
    console.log('3Ô∏è‚É£ Final subcategory distribution:\n');
    const { rows: distribution } = await client.query(`
      SELECT
        COALESCE(subcategory, 'NULL') as subcategory,
        COUNT(*) as count
      FROM cases
      WHERE case_code LIKE 'CIV%'
      GROUP BY subcategory
      ORDER BY count DESC, subcategory;
    `);

    distribution.forEach((row, idx) => {
      console.log(`   ${idx + 1}. "${row.subcategory}" - ${row.count} cases`);
    });

    console.log('\n‚úÖ Reorganization complete!\n');

    // Show the new structure
    console.log('‚ïê'.repeat(80));
    console.log('NEW SUBCATEGORY STRUCTURE FOR CIVIL LAW');
    console.log('‚ïê'.repeat(80));
    console.log(`
Available subcategories:

1. Persoana fizicƒÉ (Capacitatea de folosin»õƒÉ. Declararea judecƒÉtoreascƒÉ a mor»õii)
2. Persoana fizicƒÉ (Capacitatea de exerci»õiu)
3. Persoana fizicƒÉ (Ocrotirea incapabilului)
4. Persoana fizicƒÉ (Elemente de identificare. Starea civilƒÉ)
5. Persoana juridicƒÉ (No»õiune, Capacitate)
6. Persoana juridicƒÉ (Func»õionarea persoanei juridice)
7. Exercitarea drepturilor subiective civile. Abuzul de drept
8. ApƒÉrarea drepturilor nepatrimoniale
9. Aplicarea legii civile √Æn timp »ôi spa»õiu I
10. Aplicarea legii civile √Æn timp »ôi spa»õiu II
11. Altele

Current usage:
- Categories 1-3: In use (${renamed + movedNull + distribution.find(d => d.subcategory.includes('Capacitatea de exerci»õiu'))?.count || 0} cases)
- Categories 4-10: Ready for new cases
- Category 11: ${movedNull} edge cases
    `);

  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

reorganizeSubcategories();
